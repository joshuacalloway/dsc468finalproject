{"version":3,"sources":["logo.svg","logo/Logo.js","BarChart.js","SimplePolygon.js","CallingSageMaker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","useEffect","drawLogo","canvasRef","useRef","data","d3","current","append","attr","style","selectAll","enter","datapoint","iteration","ref","src","logo","className","alt","BarChart","drawBarChart","StyledDiv","styled","div","SimplePolygon","drawPolygon","margin","width","height","svg","x","range","y","domain","point","d","map","join","call","CallingSageMaker","useState","sageMakerResult","setSageMakerResult","callSageMaker","url","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","errorMessage","errorType","console","log","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.06277910.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c44ff353.svg\";","import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3'\nimport logo from '../logo.svg'\nconst Logo = () => {\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        const data = [ 2, 4, 2, 6, 8, 10,12]\n        drawLogo(data)\n\n    });\n    const canvasRef = useRef();\n\n    const drawLogo = (data) => {\n        const canvasHeight = 400\n        const canvasWidth = 600\n        const scale = 20\n        const svgCanvas = d3.select(canvasRef.current)\n                            .append(\"svg\")\n                            .attr(\"width\", canvasWidth)\n                            .attr(\"height\", canvasHeight)\n                            .style(\"border\", \"1px solid black\")\n        svgCanvas.selectAll(\"rect\")\n                    .data(data).enter()\n                    .append(\"rect\")\n                    .attr(\"width\", 40)\n                    .attr(\"height\", (datapoint) => datapoint * scale)\n                    .attr(\"fill\", \"orange\")\n                    .attr(\"x\", (datapoint, iteration) => iteration * 45)\n                    .attr(\"y\", (datapoint) => canvasHeight - datapoint * scale)\n    }\n    \n    return <div ref={canvasRef}><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>;\n}\n\nexport default Logo","import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3'\n\nconst BarChart = () => {\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        const data = [ 2, 4, 2, 6, 8, 10,12]\n        drawBarChart(data)\n    });\n    const canvasRef = useRef();\n\n    const drawBarChart = (data) => {\n        const canvasHeight = 400\n        const canvasWidth = 600\n        const scale = 20\n        const svgCanvas = d3.select(canvasRef.current)\n                            .append(\"svg\")\n                            .attr(\"width\", canvasWidth)\n                            .attr(\"height\", canvasHeight)\n                            .style(\"border\", \"1px solid black\")\n        svgCanvas.selectAll(\"rect\")\n                    .data(data).enter()\n                    .append(\"rect\")\n                    .attr(\"width\", 40)\n                    .attr(\"height\", (datapoint) => datapoint * scale)\n                    .attr(\"fill\", \"orange\")\n                    .attr(\"x\", (datapoint, iteration) => iteration * 45)\n                    .attr(\"y\", (datapoint) => canvasHeight - datapoint * scale)\n    }\n    return <div ref={canvasRef}></div>;\n}\nexport default BarChart","import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3'\nimport styled from 'styled-components';\n\nconst SimplePolygon = () => {\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        drawPolygon()\n    });\n    const canvasRef = useRef();\n\n    const drawPolygon = (data) => {\n        var margin = {top: 20, right: 20, bottom: 30, left: 50},\n        width = 600 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n      \n        var svg = d3.select(canvasRef.current).append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      \n      \n      var x = d3.scaleLinear().range([0, 500]);\n        var y = d3.scaleLinear().range([500, 0]);\n      \n      x.domain([0, 50]);\n      y.domain([0, 50]);\n      \n      var point = {\"x\": 24, \"y\": 31}\n      \n      var poly = [{\"x\":10, \"y\":50},\n            {\"x\":20,\"y\":20},\n            {\"x\":50,\"y\":10},\n            {\"x\":30,\"y\":30},\n          {\"x\":40,\"y\":50}];\n      \n      \n      svg.selectAll(\"polygon\")\n        .data([poly])\n      .enter().append(\"polygon\")\n        .attr(\"points\",function(d) { \n            return d.map(function(d) {\n                return [x(d.x),y(d.y)].join(\",\");\n            }).join(\" \");\n        });\n      \n      svg.append(\"circle\")\n        .attr(\"r\", 4)\n        .attr(\"cx\", x(point.x))\n        .attr(\"cy\", y(point.y))\n      \n        // add the X Axis\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n    \n      // add the Y Axis\n      svg.append(\"g\")\n        .call(d3.axisLeft(y));\n    }\n    return <StyledDiv ref={canvasRef}></StyledDiv>;\n}\nconst StyledDiv = styled.div`    \n    polygon { \n<<<<<<< HEAD\n        fill: green \n=======\n        fill: Red \n>>>>>>> 7bae35d3044e5e9b647b5a760a842466cceb4ab3\n    }\n`;\n\nexport default SimplePolygon;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n// this calls SageMaker\n// https://aws.amazon.com/blogs/machine-learning/call-an-amazon-sagemaker-model-endpoint-using-amazon-api-gateway-and-aws-lambda/\nconst CallingSageMaker = () => {\n    const [sageMakerResult, setSageMakerResult] = useState(null);\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        callSageMaker()\n    });\n    const url = \"https://32glz6r6nb.execute-api.us-east-2.amazonaws.com/dev/predictbreastcancer\";\n    const data = {\"data\":\"13.49,22.3,86.91,561.0,0.08752,0.07697999999999999,0.047510000000000004,0.033839999999999995,0.1809,0.057179999999999995,0.2338,1.3530000000000002,1.735,20.2,0.004455,0.013819999999999999,0.02095,0.01184,0.01641,0.001956,15.15,31.82,99.0,698.8,0.1162,0.1711,0.2282,0.1282,0.2871,0.06917000000000001\"}\n\n    const callSageMaker = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n        }\n\n        fetch(url, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const { errorMessage, errorType } = data;\n                if (errorMessage) {\n                    setSageMakerResult(errorMessage)\n                    console.log(errorType)\n                } else {\n                    setSageMakerResult(data)\n                }\n            });\n    }\n    return <StyledDiv>\n        <h1>Calling aws Sagemaker url {url}</h1>\n        <div>with data {JSON.stringify(data)}</div>\n        <div className=\"blinking\">\n            SageMaker Result: {sageMakerResult}\n        </div>\n    </StyledDiv>;\n}\n\nconst StyledDiv = styled.div`    \n    .blinking{\n        animation:blinkingText 1.2s infinite;\n    }\n    @keyframes blinkingText{\n        0%{     color: green;    }\n        49%{    color: red; }\n        60%{    color: transparent; }\n        99%{    color: transparent;  }\n        100%{   color: white;    }\n    }\n`\nexport default CallingSageMaker","import React from 'react';\nimport Logo from './logo/Logo.js';\nimport './App.css';\nimport BarChart from './BarChart'\nimport SimplePolygon from './SimplePolygon'\nimport CallingSageMaker from './CallingSageMaker'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>this is third change</h1>\n      <h1>this is new change to demo how to do it</h1>\n      <h1>Here's a newbie D3 polygon</h1>\n        <SimplePolygon/>\n\n        <h1>Here's a newbie D3 barchart</h1>\n        <BarChart/>\n\n        <h1>This is example of calling SageMaker</h1>\n        <CallingSageMaker/>\n         {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />  */}\n         <h1> this is a logo</h1>\n         <Logo/>\n\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}