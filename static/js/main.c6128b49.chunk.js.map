{"version":3,"sources":["USA/State/Tooltip.js","USA/State/State.js","USA/State/index.js","USA/USA.js","USA/index.js","AnimatingLineGraph/AnimatingLineGraph.js","AnimatingLineGraph/index.js","DeathCounter/index.js","DeathCounter/DeathCounter.js","App.js","data/fetchCurrentCovid19.js","floatBarChart/Tooltip.js","floatBarChart/SingleBar.js","floatBarChart/FloatBarChart.js","serviceWorker.js","index.js"],"names":["React","forwardRef","children","location","tooltipsEnabled","isVisible","useState","node","setNode","useEffect","document","getElementById","ReactDOM","createPortal","Container","style","top","y","left","x","visibility","InnerContainer","styled","div","State","result","geojson","colorFunction","name","path","onClick","svg","tooltipLocation","setTooltipLocation","tooltipVisible","setTooltipVisible","positive","death","recovered","StyledPath","d","onMouseEnter","e","pageX","pageY","onMouseLeave","confirmed","USA","resultByState","setResultByState","Map","map","i","state","canvasRef","useRef","projection","d3","translate","width","height","scale","drawEachState","json","features","find","item","properties","findGeoJson","stateCode","found","stateCodes","mapping","abbreviation","findStateCodeByName","has","get","clamp","domain","range","StyledDiv","ref","AnimatingLineGraph","index","data","max","console","log","length","x2","line","line2","firstPartPathRef","current","attr","slice","secondPartPathRef","firstPartPathFillRef","datum","y0","y1","svgRef","StyledSvg","StaticPath1","id","className","stroke","StaticPath1Fill","StaticPath2","DeathCounter","totalDeath","date","toISOString","StyledVerticalDiv","StyledHorizontalDiv","App","startDate","Date","UTC","endDate","setResult","setDate","dateIndex","setDateIndex","setIsActive","filterResultByDate","useCallback","formatted","split","replace","filter","filteredResults","calculateTotalDeath","reduce","isNaN","addDays","days","getDate","resetDate","setError","noop","setLoading","axios","then","status","catch","error","fetchDailyCovidData","getTime","nextDate","alert","sourceType","screenName","options","filterResultByDate2","formatDate","iter","deathArr","filtered","total","TotalDeath","calculateDeathArr","SingleBar","value","color","setColor","fill","clientX","clientY","StyleSvg","FloatBarChart","setData","positiveIncrease","Boolean","window","hostname","match","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c6128b49.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport styled from 'styled-components';\nimport ReactDOM from 'react-dom';\n\nconst Tooltip = ({ children, location, tooltipsEnabled, isVisible }) => {\n    const [node, setNode] = useState(null);\n\n    useEffect(() => {\n        setNode(document.getElementById(\"theApp\"));\n    }, []);\n    if (!node) {\n        return null;\n    }\n\n    return ReactDOM.createPortal(\n        <Container\n            style={{\n                top: location.y,\n                left: location.x,\n                visibility: isVisible && tooltipsEnabled ? 'visible' : 'hidden',\n            }}\n        >\n            <InnerContainer>{children}</InnerContainer>\n        </Container>,\n        node\n    );\n}\nexport default React.forwardRef(Tooltip);\n\nconst Container = styled.div`\n  opacity: 1;\n  border: 1px solid #cccccc;\n  background-color: white;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);\n  min-width: 7rem;\n  position: fixed;\n  flex-direction: column;\n  font-size: 0.8rem;\n  pointer-events: none;\n  z-index: 2;\n\n  &.attached {\n    position: absolute;\n    & .icon--close {\n      display: none;\n    }\n  }\n`;\n\nconst InnerContainer = styled.div`\n  position: relative;\n  padding: .1rem .1rem;\n`;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Tooltip from './Tooltip';\n// import FloatBarChart from '../src/floatBarChart/FloatBarChart';\n\n\nconst State = ({ result, tooltipsEnabled, geojson, colorFunction, name, onClick, svg, path }) => {\n    const [tooltipLocation, setTooltipLocation] = useState({ x: 0, y: 0 })\n    const [tooltipVisible, setTooltipVisible] = useState(false)\n    const [barVisible, setBarVisiable] = useState(\"hidden\")\n\n    const {positive = 0, death = 0, recovered = 0} = result\n\n    const onMouseEnter = (e) => {\n        setTooltipVisible(true)\n        setTooltipLocation({ x: e.pageX, y: e.pageY })\n    }\n\n    const onMouseLeave = () => {\n        setTooltipVisible(false);\n        setTooltipLocation({ x: 0, y: 0 })\n    }\n\n    return (\n        <>\n            <StyledPath d={path(geojson)} onMouseEnter={onMouseEnter} death={death} onMouseLeave={onMouseLeave} colorFunction={colorFunction} positive={positive}>\n            </StyledPath>\n            <Tooltip name={'Enable tooltips'} tooltipsEnabled={tooltipsEnabled} location={tooltipLocation} isVisible={tooltipVisible}>\n                <div>\n                    <h3>{name}</h3>\n                    <hr/>\n                    <ul>\n                        <li>Confirmed: {positive}</li>\n                        <li>death: {death}</li>\n                        <li>recovered: {recovered}</li>\n                        <li>cF: {colorFunction(death)}</li>\n                    </ul>\n                    </div>\n            </Tooltip>\n                \n        </>\n    )\n}\n\nexport default State\n\nconst StyledPath = styled.path`\n    stroke: green;\n    stroke-width: 1;\n    fill:  ${({ colorFunction, confirmed, death }) => colorFunction(death)};\n`","import State from './State'\n\n\nexport default State;","import React, { useRef, useEffect, useState } from 'react';\n\nimport State from './State'\nimport json from './us-states.json'\nimport stateCodes from './state-codes.json'\nimport styled from 'styled-components';\n\nimport * as d3 from 'd3'\n\nconst USA = ({ result, onClick, tooltipsEnabled }) => {\n    const [resultByState, setResultByState] = useState(null)\n\n    useEffect(() => {\n        if (result) {\n            setResultByState( new Map(result.map(i => [i.state, i])))\n        }\n    }, [result])\n\n    const canvasRef = useRef();\n    const svg = useRef()\n    const states = ['Wyoming', 'Washington', 'Alaska', 'Colorado', 'Florida', 'North Carolina', 'South Carolina', 'Virginia', 'New Hampshire', 'Iowa', 'Nebraska', 'Louisiana', 'Delaware', 'Arizona', 'Arkansas', 'Connecticut', 'South Dakota', 'North Dakota', 'Kentucky', 'Michigan', 'Pennsylvania', 'Maine', 'Vermont', 'Massachusetts', 'Maryland', 'Mississippi', 'New Mexico', 'Connecticut', 'Rhode Island', 'West Virginia', 'Wisconsin', 'Puerto Rico', 'District of Columbia', 'Hawaii', 'Nevada', 'Oregon', 'Idaho', 'Ohio', 'Minnesota', 'Utah', 'Montana', 'Minnesota', 'California', 'Texas', 'Illinois', 'Indiana', 'Georgia', 'Alabama', 'Missouri', 'Kansas', 'Tennessee', 'Oklahoma', 'New York']\n\n    let width = 960;\n    let height = 500;\n    let projection = d3.geoAlbersUsa()\n        .translate([width / 2, height / 2]) // translate to center of screen\n        .scale([1000]); // scale things down so see entire US\n\n    // Define path generator\n    let path = d3.geoPath() // path generator that will convert GeoJSON to SVG paths\n        .projection(projection); // tell path generator to use albersUsa projection\n\n    const findGeoJson = (state) => {\n        return json.features.find(item => item.properties.name == state)\n    }\n\n    const findStateCodeByName = (name) => {\n        const found = stateCodes.find(mapping => mapping.name == name)\n        if (found) {\n            return found.abbreviation\n        }\n        return ''\n    }\n\n    const getColorFunction = () => {\n        const bloodRed = '#9b0000'\n\n        let lowColor = '#ffffff';\n      //  let lowColor = 'pink'\n        let highColor = bloodRed;\n\n    \n        let minVal = 0;\n        let maxVal = 100000;\n        let colorFunction = d3.scaleLog().clamp(true).domain([0.1, maxVal]).range([lowColor, highColor])\n        return colorFunction\n    }\n    const drawEachState = (state) => {\n        const geojson = findGeoJson(state);\n        const name = geojson.properties.name\n        const stateCode = findStateCodeByName(name)\n        let result = { death: 0, positive: 0, recovered: 0 }\n        if (resultByState && resultByState.has(stateCode)) {\n            result = resultByState.get(stateCode)\n        }\n        return <State tooltipsEnabled={tooltipsEnabled} result={result} svg={svg} path={path} name={name} geojson={geojson} colorFunction={getColorFunction()} />\n    }\n\n    return (\n        <StyledDiv>\n            <div ref={canvasRef} onClick={onClick}>\n                <svg ref={svg} width={960} height={500}>\n                    <g>\n                        {states.map(state => drawEachState(state))}\n                    </g>\n                </svg>\n\n            </div>\n        </StyledDiv>\n    );\n}\n\nexport default USA\nconst StyledDiv = styled.div`\n    .label {\n        font-size: 1rem;\n        display: table-cell;\n    }\n    label {\n        display: table-cell;\n\n    }\n    border:1px solid purple; \n\n`","import USA from './USA'\n\n\nexport default USA;","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport * as d3 from 'd3'\n\nconst bloodRed = '#9b0000'\n\nconst AnimatingLineGraph = ({\n    height,\n    index,\n    data,\n    width,\n}) => {\n    const max = d3.max(data)\n    console.log(\"index is \", index, \", max is \", max)\n    var x = d3.scaleLinear().domain([0, data.length]).range([-5, width]); // starting point is -5 so the first value doesn't show and slides off the edge as part of the transition\n    var x2 = d3.scaleLinear().domain([0, data.length - index]).range([x(index), width]); // starting point is -5 so the first value doesn't show and slides off the edge as part of the transition\n    var y = d3.scaleLinear().domain([0, max]).range([height, 0]);\n\n    var line = d3.line()\n        .x((d, i) => x(i))\n        .y((d) => y(d))\n\n    var line2 = d3.line()\n        .x((d, i) => x2(i))\n        .y((d) =>  y(d))\n    // .curve(d3.curveBasis)\n\n    useEffect(() => {\n        d3.select(firstPartPathRef.current).attr('d', line(data.slice(0, index)))\n        d3.select(secondPartPathRef.current).attr('d', line2(data.slice(index)))\n\n        d3.select(firstPartPathFillRef.current)\n          .datum(data.slice(0,index))\n          .attr(\"d\", d3.area()\n            .x(function(d,i) { return x(i) })\n            .y0( height )\n            .y1(function(d) { return y(d) })\n            )\n\n    }, [data, height, index, line, line2, x, y])\n\n    const graphRef = useRef()\n    const firstPartPathRef = useRef()\n    const firstPartPathFillRef = useRef()\n    const secondPartPathRef = useRef()\n    const svgRef = useRef()\n\n    return (\n        <>\n            <StyledSvg ref={svgRef} width={`${width}px`} height={`${height}px`}>\n                <g>\n                    <StaticPath1 id=\"path1\" className=\"line\" stroke={bloodRed} ref={firstPartPathRef} />\n                    <StaticPath1Fill id=\"path1\" className=\"line\" stroke={bloodRed} ref={firstPartPathFillRef} />\n                    <StaticPath2 id=\"path2\" className=\"line\" stroke={'#D3D3D3'} ref={secondPartPathRef} />\n                </g>\n            </StyledSvg>\n        </>\n    );\n}\n\nexport default AnimatingLineGraph\n\nconst StaticPath1 = styled.path`\n    stroke: ${({ stroke }) => stroke};\n    fill: none;\n    stroke-width: 4;\n`\n\nconst StaticPath1Fill = styled.path`\n    stroke: none;\n    fill: red;\n    stroke-width: 4;\n    fill-opacity: 0.3;\n`\n\nconst StaticPath2 = styled.path`\n    stroke: ${({ stroke }) => stroke};\n    stroke-dasharray: 5,5; \n    fill: none;\n    stroke-width:2;\n`\nconst StyledSvg = styled.svg`\n    margin: 1rem;\n    border:1px solid blue; \n`\n","\nimport AnimatingLineGraph from './AnimatingLineGraph'\nexport default AnimatingLineGraph","import DeathCounter from './DeathCounter'\n\nexport default DeathCounter","import React from 'react'\n \nconst DeathCounter = ({totalDeath, date}) => {\n  return <div>{totalDeath}  Deaths as of {date.toISOString()}</div>;\n};\n\nexport default DeathCounter","import React, { useState, useEffect, useCallback } from 'react';\nimport USA from './USA'\nimport { fetchDailyCovidData } from './data'\nimport AnimatingLineGraph from './AnimatingLineGraph'\nimport styled from 'styled-components'\nimport { TwitterTimelineEmbed } from 'react-twitter-embed';\nimport DeathCounter from './DeathCounter'\nimport noop from 'lodash'\n\nfunction App() {\n  const startDate = new Date(Date.UTC(2020, 2,11,0,0))\n  const endDate = new Date(Date.UTC(2020,4,24))\n  const [result, setResult] = useState(null)\n  const [date, setDate] = useState(startDate)\n  const [dateIndex, setDateIndex] = useState(0)\n  const [isActive, setIsActive] = useState(true);\n  \n\n  const filterResultByDate = useCallback((result, date) => {\n    const formatted = `${date.toISOString().split('T')[0].replace(/-/g, '')}`\n    return result && result.filter(item => item.date == formatted)\n  })\n\n  var filteredResults = filterResultByDate(result, date);\n\n  const calculateTotalDeath = (filteredResults) => {\n    if (filteredResults) {\n      const {death} = filteredResults.reduce((item, {death}) => ({ death: death + item.death }), { death: 0})      \n      return isNaN(death) ? 0 : death\n    }\n    return 0\n  };\n\n  const incrementDate = () => {\n    var day = 60 * 60 * 24 * 1000;\n    if (date.getTime() <= endDate.getTime()) {\n      const nextDate = new Date(date.getTime() + day)\n      setDate(nextDate)\n      setDateIndex(dateIndex+1)\n    }\n  }\n  const addDays = (date, days) => {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  const resetDate = useCallback(() => {\n    setIsActive(true)\n    setDate(startDate)\n    setDateIndex(0)\n  })\n\n  useEffect(() => {\n    fetchDailyCovidData(noop, setResult)\n  },[])\n\n  const calculateDeathArr = (result, startDate, endDate) => {\n    const filterResultByDate2 = (result, date) => {\n      const formatted = `${date.toISOString().split('T')[0].replace(/-/g, '')}`\n      return result && result.filter(item => item.date == formatted)\n    }\n    const formatDate = (date) => {\n      return date.toISOString().split('T')[0].replace(/-/g, '');\n    }\n\n    var iter = new Date(startDate.getTime())\n\n    var deathArr = []\n    while (iter.getTime() <= endDate.getTime()) {\n      const filtered = filterResultByDate2(result, iter);\n      const total = calculateTotalDeath(filtered)\n      console.log(\"total is \", total, \", filtered for \", formatDate(iter), \" is \", filtered)\n\n      deathArr = [...deathArr, {Date: formatDate(iter), TotalDeath: total}]\n      console.log(\"iter before increment is \", formatDate(iter))\n\n      iter = addDays(iter, 1)\n      console.log(\"iter after increment is \", formatDate(iter))\n    }\n    console.log(\"useEffect, deathArr is \", deathArr)\n    return deathArr;\n  }\n\n  return (\n    <StyledVerticalDiv id=\"theApp\" className=\"App\">\n        <StyledVerticalDiv>\n          <DeathCounter totalDeath={calculateTotalDeath(filterResultByDate(result, date))} date={date} />\n          <button onClick={incrementDate}>Next Date</button>\n          <button onClick={resetDate}>Reset Date</button>\n\n        <USA tooltipsEnabled={true} result={filteredResults} onClick={() => alert('clicked USA')} />\n        </StyledVerticalDiv>\n        <StyledHorizontalDiv>\n        <TwitterTimelineEmbed\n          sourceType=\"profile\"\n          screenName=\"saurabhnemade\"\n          options={{ height: 400 }}\n        />\n          {/* <div><div className={\"label\"}>Enable or Disable Tooltips </div> {enableTooltipToggleButton}</div> */}\n          <AnimatingLineGraph index={dateIndex} data={calculateDeathArr(result, startDate, endDate).map(x => x.TotalDeath)} width={'800'} height={'400'} />\n        </StyledHorizontalDiv>\n      </StyledVerticalDiv>\n  );\n}\nconst StyledVerticalDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nconst StyledHorizontalDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: left;\n  align-items: flex-start;\n`;\n\nexport default App;\n","import * as d3 from 'd3'\n\nimport axios from 'axios'\nimport noop from 'lodash/noop'\n\nconst CURRENT = 'https://covidtracking.com/api/v1/states/current.json'\n\nconst fetchCurrentCovid19 = (setError=noop, setResult=noop, setLoading=noop) => {\n    setLoading(true)\n    axios.get(CURRENT)\n        .then(({data, status}) => {\n            setResult(data)\n            setLoading(false)\n        })\n        .catch(error => {\n            setError(true)\n            setLoading(false)\n        })\n   \n    return { };\n}\n\nconst fetchDailyCovidData = (setError=noop, setResult=noop, setLoading=noop) => {\n    setLoading(true)\n    axios.get('https://covidtracking.com/api/v1/states/daily.json')\n        .then(({data, status}) => {\n            console.log('in axios, then, data is ', data)\n            setResult(data)\n            setLoading(false)\n        })\n        .catch(error => {\n            setError(true)\n            setLoading(false)\n        })\n   \n    return { };\n}\n\nconst fetchDailyStateData = (setResult=noop) => {\n    axios.get('https://covidtracking.com/api/v1/states/daily.json')\n        .then(({data, status}) => {\n            // console.log('in axios, then, data is ', data)\n            setResult(data)\n        })\n   \n    return { };\n    \n}\n\n\nexport {fetchCurrentCovid19, fetchDailyCovidData,fetchDailyStateData }\n\n","import React, { useState, useEffect } from 'react';\n\nimport styled from 'styled-components';\nimport ReactDOM from 'react-dom';\n\nconst Tooltip = ({ children, location, tooltipsEnabled, isVisible }) => {\n    const [node, setNode] = useState(null);\n\n    useEffect(() => {\n        setNode(document.getElementById(\"theApp\"));\n    }, []);\n    if (!node) {\n        return null;\n    }\n\n    return ReactDOM.createPortal(\n        <Container\n            style={{\n                top: location.y,\n                left: location.x,\n                visibility: isVisible && tooltipsEnabled ? 'visible' : 'hidden',\n            }}\n        >\n            <InnerContainer>{children}</InnerContainer>\n        </Container>,\n        node\n    );\n}\nexport default React.forwardRef(Tooltip);\n\nconst Container = styled.div`\n  opacity: 1;\n  border: 1px solid #cccccc;\n  background-color: white;\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);\n  min-width: 7rem;\n  position: fixed;\n  flex-direction: column;\n  font-size: 0.8rem;\n  pointer-events: none;\n  z-index: 2;\n\n  &.attached {\n    position: absolute;\n    & .icon--close {\n      display: none;\n    }\n  }\n`;\n\nconst InnerContainer = styled.div`\n  position: relative;\n  padding: .1rem .1rem;\n`;","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport * as d3 from 'd3'\nimport styled from 'styled-components'\nimport Tooltip from './Tooltip';\n\nconst SingleBar = ({ x, y, width = 5, height, value, date }) => {\n    // const formatted = `${date.toISOString().split('T')[0].replace(/-/g, '')}`\n    const [tooltipLocation, setTooltipLocation] = useState({ x: 0, y: 0 })\n    const [tooltipVisible, setTooltipVisible] = useState(false)\n    const [color, setColor] = useState('blue')\n    \n    const onMouseEnter = (e) => {\n        setTooltipVisible(true)\n        setTooltipLocation({ x: e.clientX, y: e.clientY })\n        setColor('red')\n    }\n    const onMouseLeave = () => {\n        setTooltipVisible(false);\n        setTooltipLocation({ x: 0, y: 0 })\n        setColor('blue')\n    }\n    \n    return (\n        <>\n            <rect fill={color} x={x} y={y} width={width} height={height} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} />\n            <Tooltip name={'Enable tooltips'} tooltipsEnabled={tooltipVisible} location={tooltipLocation} isVisible={tooltipVisible}>\n                <div>\n                    <li>date:{date}</li>\n                    <li>Confirmed:{value}</li>\n                </div>\n            </Tooltip>\n        </>\n        \n    )\n}\n\n\nexport default SingleBar\n\n\n    ","import React, { useState, useEffect, useRef,useCallback } from 'react';\nimport SingleBar from './SingleBar';\nimport * as d3 from 'd3';\nimport styled from 'styled-components';\nimport axios from 'axios'\nimport { fetchDailyStateData } from '../data/fetchCurrentCovid19';\n\nconst FloatBarChart = () => {\n\n    const startDate = new Date(Date.UTC(2020, 0, 22)) // first case is 2020/01/22 in WA\n    const endDate = new Date(Date.UTC(2020,5,29)) // till now\n    const [date, setDate] = useState([])\n    const [state, setState] = useState('TX')\n    const [data, setData] = useState([])\n    const padding = 5\n\n    useEffect(() => {\n        axios.get('https://covidtracking.com/api/v1/states/daily.json').then(\n            data => {\n                setData(data.data.filter(item => item.state == state).map((item) => item)) \n            }\n        )\n    }, [])\n    console.log(\"data\",data)\n    \n    const max = 6000\n    var x = d3.scaleLinear().domain([0, 87]).range([0, 600])\n    var y = d3.scaleLinear().domain([0, max]).range([0, 600]);\n    return (\n            <StyleSvg>\n            <g>\n                {data.map((item, index) =>\n                    <SingleBar x={490 - (index + padding * index)} y={500 - y(item.positiveIncrease)} width={padding} height={y(item.positiveIncrease)}\n                        value={item.positiveIncrease} date={item.date}/>)}     \n            </g> \n            </StyleSvg>\n        \n    )\n}\n\nconst StyleSvg = styled.svg`\nwidth:500px;\nheight:500px;\nmargin : 30px 30px 30px 30px;\nborder:1px solid black\n`\n\nexport default FloatBarChart;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport FloatBarChart from './floatBarChart/FloatBarChart'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <FloatBarChart />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}