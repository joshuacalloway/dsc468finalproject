{"version":3,"sources":["logo.svg","BarChart.js","SimplePolygon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BarChart","useEffect","drawBarChart","canvasRef","useRef","data","d3","current","append","attr","style","selectAll","enter","datapoint","iteration","ref","StyledDiv","styled","div","SimplePolygon","drawPolygon","margin","width","height","svg","x","range","y","domain","point","d","map","join","call","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,kMCgC5BC,EA7BE,WAGbC,qBAAU,WAENC,EADa,CAAE,EAAG,EAAG,EAAG,EAAG,OAG/B,IAAMC,EAAYC,mBAEZF,EAAe,SAACG,GAIAC,IAAUH,EAAUI,SACjBC,OAAO,OACPC,KAAK,QAJN,KAKCA,KAAK,SANL,KAOAC,MAAM,SAAU,mBAC3BC,UAAU,QACPN,KAAKA,GAAMO,QACXJ,OAAO,QACPC,KAAK,QAAS,IACdA,KAAK,UAAU,SAACI,GAAD,OAVd,GAU6BA,KAC9BJ,KAAK,OAAQ,UACbA,KAAK,KAAK,SAACI,EAAWC,GAAZ,OAAsC,GAAZA,KACpCL,KAAK,KAAK,SAACI,GAAD,OAfF,IAEP,GAauCA,MAEzD,OAAO,yBAAKE,IAAKZ,K,oIC1BrB,IA4DMa,E,MAAYC,EAAOC,IAAV,KAMAC,EAlEO,WAGlBlB,qBAAU,WACNmB,OAEJ,IAAMjB,EAAYC,mBAEZgB,EAAc,SAACf,GACjB,IAAIgB,EAAe,GAAfA,EAA0B,GAA1BA,EAAsC,GAAtCA,EAAgD,GACpDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,IAAMF,EAAaA,EAExBG,EAAMlB,IAAUH,EAAUI,SAASC,OAAO,OAC7CC,KAAK,QAASa,EAAQD,EAAcA,GACpCZ,KAAK,SAAUc,EAASF,EAAaA,GACvCb,OAAO,KACLC,KAAK,YACA,aAAeY,EAAc,IAAMA,EAAa,KAGpDI,EAAInB,MAAiBoB,MAAM,CAAC,EAAG,MAC7BC,EAAIrB,MAAiBoB,MAAM,CAAC,IAAK,IAEvCD,EAAEG,OAAO,CAAC,EAAG,KACbD,EAAEC,OAAO,CAAC,EAAG,KAEb,IAAIC,EAAc,GAAdA,EAAuB,GAQ3BL,EAAIb,UAAU,WACXN,KAAK,CAPG,CAAC,CAAC,EAAI,GAAI,EAAI,IACnB,CAAC,EAAI,GAAG,EAAI,IACZ,CAAC,EAAI,GAAG,EAAI,IACZ,CAAC,EAAI,GAAG,EAAI,OAKjBO,QAAQJ,OAAO,WACbC,KAAK,UAAS,SAASqB,GACpB,OAAOA,EAAEC,KAAI,SAASD,GAClB,MAAO,CAACL,EAAEK,EAAEL,GAAGE,EAAEG,EAAEH,IAAIK,KAAK,QAC7BA,KAAK,QAGdR,EAAIhB,OAAO,UACRC,KAAK,IAAK,GACVA,KAAK,KAAMgB,EAAEI,IACbpB,KAAK,KAAMkB,EAAEE,IAGhBL,EAAIhB,OAAO,KACRC,KAAK,YAAa,eAAiBc,EAAS,KAC5CU,KAAK3B,IAAcmB,IAGtBD,EAAIhB,OAAO,KACRyB,KAAK3B,IAAYqB,KAEtB,OAAO,kBAACX,EAAD,CAAWD,IAAKZ,KC5BZ+B,MA5Bf,WAEE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,0DACE,kBAAC,EAAD,MAEA,2DACA,kBAAC,EAAD,MAEA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCTYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33652f2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3'\n\nconst BarChart = () => {\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        const data = [ 2, 4, 2, 6, 8 ]\n        drawBarChart(data)\n    });\n    const canvasRef = useRef();\n\n    const drawBarChart = (data) => {\n        const canvasHeight = 400\n        const canvasWidth = 600\n        const scale = 20\n        const svgCanvas = d3.select(canvasRef.current)\n                            .append(\"svg\")\n                            .attr(\"width\", canvasWidth)\n                            .attr(\"height\", canvasHeight)\n                            .style(\"border\", \"1px solid black\")\n        svgCanvas.selectAll(\"rect\")\n                    .data(data).enter()\n                    .append(\"rect\")\n                    .attr(\"width\", 40)\n                    .attr(\"height\", (datapoint) => datapoint * scale)\n                    .attr(\"fill\", \"orange\")\n                    .attr(\"x\", (datapoint, iteration) => iteration * 45)\n                    .attr(\"y\", (datapoint) => canvasHeight - datapoint * scale)\n    }\n    return <div ref={canvasRef}></div>;\n}\nexport default BarChart","import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3'\nimport styled from 'styled-components';\n\nconst SimplePolygon = () => {\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        drawPolygon()\n    });\n    const canvasRef = useRef();\n\n    const drawPolygon = (data) => {\n        var margin = {top: 20, right: 20, bottom: 30, left: 50},\n        width = 600 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n      \n        var svg = d3.select(canvasRef.current).append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      \n      \n      var x = d3.scaleLinear().range([0, 500]);\n        var y = d3.scaleLinear().range([500, 0]);\n      \n      x.domain([0, 50]);\n      y.domain([0, 50]);\n      \n      var point = {\"x\": 24, \"y\": 31}\n      \n      var poly = [{\"x\":10, \"y\":50},\n            {\"x\":20,\"y\":20},\n            {\"x\":50,\"y\":10},\n            {\"x\":30,\"y\":30}];\n      \n      \n      svg.selectAll(\"polygon\")\n        .data([poly])\n      .enter().append(\"polygon\")\n        .attr(\"points\",function(d) { \n            return d.map(function(d) {\n                return [x(d.x),y(d.y)].join(\",\");\n            }).join(\" \");\n        });\n      \n      svg.append(\"circle\")\n        .attr(\"r\", 4)\n        .attr(\"cx\", x(point.x))\n        .attr(\"cy\", y(point.y))\n      \n        // add the X Axis\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n    \n      // add the Y Axis\n      svg.append(\"g\")\n        .call(d3.axisLeft(y));\n    }\n    return <StyledDiv ref={canvasRef}></StyledDiv>;\n}\nconst StyledDiv = styled.div`    \n    polygon { \n        fill: CadetBlue \n    }\n`;\n\nexport default SimplePolygon;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BarChart from './BarChart'\nimport SimplePolygon from './SimplePolygon'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>Here's a newbie D3 polygon</h1>\n        <SimplePolygon/>\n\n        <h1>Here's a newbie D3 barchart</h1>\n        <BarChart/>\n\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}