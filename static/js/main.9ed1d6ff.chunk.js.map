{"version":3,"sources":["logo/Logo.js","BarChart.js","SimplePolygon.js","CallingSageMaker.js","App.js","serviceWorker.js","index.js"],"names":["Logo","useEffect","drawLogo","canvasRef","useRef","data","d3","domain","range","svgCanvas","current","append","attr","ref","BarChart","drawBarChart","style","selectAll","enter","datapoint","iteration","StyledDiv","styled","div","SimplePolygon","drawPolygon","margin","width","height","svg","x","y","point","d","map","join","call","CallingSageMaker","useState","sageMakerResult","setSageMakerResult","callSageMaker","url","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","errorMessage","errorType","console","log","className","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0PA0DeA,EAvDF,WAGTC,qBAAU,WAENC,EADa,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG,QAIrC,IAAMC,EAAYC,mBAEZF,EAAW,SAACG,GAWGC,MACIC,OAAO,CAAC,EAAG,MACXC,MAAM,CAAC,EAAG,MAX/B,IAaMC,EAAYH,IAAUH,EAAUO,SACjCC,OAAO,OACPC,KAAK,SAfW,KAgBhBA,KAAK,QAfU,KAgBfD,OAAO,KACPC,KAAK,OAAQ,QAElBH,EACKE,OAAO,UACPC,KAAK,KAAK,OACVA,KAAK,KAAM,OACXA,KAAK,IAAK,IAGfH,EACKE,OAAO,UACPC,KAAK,KAAM,KACXA,KAAK,KAAM,KACXA,KAAK,IAAK,IACfH,EACKE,OAAO,QACPC,KAAK,IAAK,k6EAEVA,KAAK,YAAa,iCAI3B,OAAO,yBAAKC,IAAKV,KCvBNW,G,MA7BE,WAGbb,qBAAU,WAENc,EADa,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG,QAGrC,IAAMZ,EAAYC,mBAEZW,EAAe,SAACV,GAIAC,IAAUH,EAAUO,SACjBC,OAAO,OACPC,KAAK,QAJN,KAKCA,KAAK,SANL,KAOAI,MAAM,SAAU,mBAC3BC,UAAU,QACPZ,KAAKA,GAAMa,QACXP,OAAO,QACPC,KAAK,QAAS,IACdA,KAAK,UAAU,SAACO,GAAD,OAVd,GAU6BA,KAC9BP,KAAK,OAAQ,UACbA,KAAK,KAAK,SAACO,EAAWC,GAAZ,OAAsC,GAAZA,KACpCR,KAAK,KAAK,SAACO,GAAD,OAfF,IAEP,GAauCA,MAEzD,OAAO,yBAAKN,IAAKV,M,mOC1BrB,IA8DMkB,EAAYC,IAAOC,IAAV,KAUAC,EAxEO,WAGlBvB,qBAAU,WACNwB,OAEJ,IAAMtB,EAAYC,mBAEZqB,EAAc,SAACpB,GACjB,IAAIqB,EAAe,GAAfA,EAA0B,GAA1BA,EAAsC,GAAtCA,EAAgD,GACpDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,IAAMF,EAAaA,EAExBG,EAAMvB,IAAUH,EAAUO,SAASC,OAAO,OAC7CC,KAAK,QAASe,EAAQD,EAAcA,GACpCd,KAAK,SAAUgB,EAASF,EAAaA,GACrCf,OAAO,KACPC,KAAK,YACA,aAAec,EAAc,IAAMA,EAAa,KAGpDI,EAAIxB,MAAiBE,MAAM,CAAC,EAAG,MAC7BuB,EAAIzB,MAAiBE,MAAM,CAAC,IAAK,IAEvCsB,EAAEvB,OAAO,CAAC,EAAG,KACbwB,EAAExB,OAAO,CAAC,EAAG,KAEb,IAAIyB,EAAc,GAAdA,EAAuB,GAS3BH,EAAIZ,UAAU,WACXZ,KAAK,CARG,CAAC,CAAC,EAAI,GAAI,EAAI,IACnB,CAAC,EAAI,GAAG,EAAI,IACZ,CAAC,EAAI,GAAG,EAAI,IACZ,CAAC,EAAI,GAAG,EAAI,IACd,CAAC,EAAI,GAAG,EAAI,OAKfa,QAAQP,OAAO,WACbC,KAAK,UAAS,SAASqB,GACpB,OAAOA,EAAEC,KAAI,SAASD,GAClB,MAAO,CAACH,EAAEG,EAAEH,GAAGC,EAAEE,EAAEF,IAAII,KAAK,QAC7BA,KAAK,QAGdN,EAAIlB,OAAO,UACRC,KAAK,IAAK,IACVA,KAAK,KAAMkB,EAAEE,IACbpB,KAAK,KAAMmB,EAAEC,IACbpB,KAAK,OAAO,OAGfiB,EAAIlB,OAAO,KACRC,KAAK,YAAa,eAAiBgB,EAAS,KAC5CQ,KAAK9B,IAAcwB,IAGtBD,EAAIlB,OAAO,KACRyB,KAAK9B,IAAYyB,KAEtB,OAAO,kBAACV,EAAD,CAAWR,IAAKV,K,oXC3D3B,IAsCMkB,EAAYC,IAAOC,IAAV,KAYAc,EAlDU,WAAO,IAAD,EACmBC,mBAAS,MAD5B,mBACpBC,EADoB,KACHC,EADG,KAI3BvC,qBAAU,WACNwC,OAEJ,IAAMC,EAAM,iFACNrC,EAAO,CAAC,KAAO,8SAEfoC,EAAgB,WAClB,IAAME,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU3C,IAGzB4C,MAAMP,EAAKC,GACNO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA7C,GAAS,IACHgD,EAA4BhD,EAA5BgD,aAAcC,EAAcjD,EAAdiD,UAClBD,GACAb,EAAmBa,GACnBE,QAAQC,IAAIF,IAEZd,EAAmBnC,OAInC,OAAO,kBAAC,EAAD,KACH,yDAA+BqC,GAC/B,0CAAgBK,KAAKC,UAAU3C,IAC/B,yBAAKoD,UAAU,YAAf,qBACuBlB,KCIhBmB,MAnCf,WAEE,OACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAClB,oDACA,uEACA,0DACE,kBAAC,EAAD,MAEA,2DACA,kBAAC,EAAD,MAEA,oEACA,kBAAC,EAAD,MAEC,+CACA,kBAAC,EAAD,MAED,mCACO,4CADP,wBAGA,uBACEA,UAAU,WACVE,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCjBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.9ed1d6ff.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3'\n\nconst Logo = () => {\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        const data = [ 2, 4, 2, 6, 8, 10,12]\n        drawLogo(data)\n\n    });\n    const canvasRef = useRef();\n\n    const drawLogo = (data) => {\n        // <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n        const canvasHeight = 400\n        const canvasWidth = 600\n        const scale = 20\n        // <g fill=\"#61DAFB\">\n        // <path d=\"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\"/>\n        \n        // <path d=\"M520.5 78.1z\"/>\n        //  <circle cx=\"300\" cy=\"300.5\" r=\"30.7\"/>\n        // </g>\n        const allscale = d3.scaleLinear()\n                            .domain([0, 800])\n                            .range([0, 400]);\n\n        const svgCanvas = d3.select(canvasRef.current)\n            .append(\"svg\")\n            .attr(\"height\",canvasHeight)\n            .attr(\"width\", canvasWidth)\n            .append(\"g\")\n            .attr(\"fill\", \"Blue\")\n            \n        svgCanvas\n            .append(\"circle\")\n            .attr(\"cx\",240.9)\n            .attr(\"cy\", 200.5)\n            .attr(\"r\", 20)\n            \n    \n        svgCanvas\n            .append(\"circle\")\n            .attr(\"cx\", 300)\n            .attr(\"cy\", 300)\n            .attr(\"r\", 10)\n        svgCanvas\n            .append(\"path\") \n            .attr(\"d\", \"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\")\n            \n            .attr(\"transform\", \"translate(110,120) scale(.3)\")      \n            \n    }\n    \n    return <div ref={canvasRef}></div>;\n}\n\nexport default Logo","import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3'\n\nconst BarChart = () => {\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        const data = [ 2, 4, 2, 6, 8, 10,12]\n        drawBarChart(data)\n    });\n    const canvasRef = useRef();\n\n    const drawBarChart = (data) => {\n        const canvasHeight = 400\n        const canvasWidth = 600\n        const scale = 20\n        const svgCanvas = d3.select(canvasRef.current)\n                            .append(\"svg\")\n                            .attr(\"width\", canvasWidth)\n                            .attr(\"height\", canvasHeight)\n                            .style(\"border\", \"1px solid black\")\n        svgCanvas.selectAll(\"rect\")\n                    .data(data).enter()\n                    .append(\"rect\")\n                    .attr(\"width\", 40)\n                    .attr(\"height\", (datapoint) => datapoint * scale)\n                    .attr(\"fill\", \"orange\")\n                    .attr(\"x\", (datapoint, iteration) => iteration * 45)\n                    .attr(\"y\", (datapoint) => canvasHeight - datapoint * scale)\n    }\n    return <div ref={canvasRef}></div>;\n}\nexport default BarChart","import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3'\nimport styled from 'styled-components';\n\nconst SimplePolygon = () => {\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        drawPolygon()\n    });\n    const canvasRef = useRef();\n\n    const drawPolygon = (data) => {\n        var margin = {top: 20, right: 20, bottom: 30, left: 50},\n        width = 600 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n      \n        var svg = d3.select(canvasRef.current).append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      \n      \n      var x = d3.scaleLinear().range([0, 500]);\n        var y = d3.scaleLinear().range([500, 0]);\n      \n      x.domain([0, 50]);\n      y.domain([0, 50]);\n      \n      var point = {\"x\": 24, \"y\": 31}\n      \n      var poly = [{\"x\":10, \"y\":50},\n            {\"x\":20,\"y\":20},\n            {\"x\":50,\"y\":10},\n            {\"x\":30,\"y\":30},\n          {\"x\":40,\"y\":50}];\n      \n      \n      svg.selectAll(\"polygon\")\n        .data([poly])\n      .enter().append(\"polygon\")\n        .attr(\"points\",function(d) { \n            return d.map(function(d) {\n                return [x(d.x),y(d.y)].join(\",\");\n            }).join(\" \");\n        });\n      \n      svg.append(\"circle\")\n        .attr(\"r\", 25)\n        .attr(\"cx\", x(point.x))\n        .attr(\"cy\", y(point.y))\n        .attr(\"fill\",\"red\")\n      \n        // add the X Axis\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n    \n      // add the Y Axis\n      svg.append(\"g\")\n        .call(d3.axisLeft(y));\n    }\n    return <StyledDiv ref={canvasRef}></StyledDiv>;\n}\nconst StyledDiv = styled.div`    \n    polygon { \n<<<<<<< HEAD\n        fill: green \n=======\n        fill: Red \n>>>>>>> 7bae35d3044e5e9b647b5a760a842466cceb4ab3\n    }\n`;\n\nexport default SimplePolygon;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n// this calls SageMaker\n// https://aws.amazon.com/blogs/machine-learning/call-an-amazon-sagemaker-model-endpoint-using-amazon-api-gateway-and-aws-lambda/\nconst CallingSageMaker = () => {\n    const [sageMakerResult, setSageMakerResult] = useState(null);\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        callSageMaker()\n    });\n    const url = \"https://32glz6r6nb.execute-api.us-east-2.amazonaws.com/dev/predictbreastcancer\";\n    const data = {\"data\":\"13.49,22.3,86.91,561.0,0.08752,0.07697999999999999,0.047510000000000004,0.033839999999999995,0.1809,0.057179999999999995,0.2338,1.3530000000000002,1.735,20.2,0.004455,0.013819999999999999,0.02095,0.01184,0.01641,0.001956,15.15,31.82,99.0,698.8,0.1162,0.1711,0.2282,0.1282,0.2871,0.06917000000000001\"}\n\n    const callSageMaker = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n        }\n\n        fetch(url, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                const { errorMessage, errorType } = data;\n                if (errorMessage) {\n                    setSageMakerResult(errorMessage)\n                    console.log(errorType)\n                } else {\n                    setSageMakerResult(data)\n                }\n            });\n    }\n    return <StyledDiv>\n        <h1>Calling aws Sagemaker url {url}</h1>\n        <div>with data {JSON.stringify(data)}</div>\n        <div className=\"blinking\">\n            SageMaker Result: {sageMakerResult}\n        </div>\n    </StyledDiv>;\n}\n\nconst StyledDiv = styled.div`    \n    .blinking{\n        animation:blinkingText 1.2s infinite;\n    }\n    @keyframes blinkingText{\n        0%{     color: green;    }\n        49%{    color: red; }\n        60%{    color: transparent; }\n        99%{    color: transparent;  }\n        100%{   color: white;    }\n    }\n`\nexport default CallingSageMaker","import React from 'react';\nimport Logo from './logo/Logo.js';\nimport './App.css';\nimport BarChart from './BarChart'\nimport SimplePolygon from './SimplePolygon'\nimport CallingSageMaker from './CallingSageMaker'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>this is third change</h1>\n      <h1>this is new change to demo how to do it</h1>\n      <h1>Here's a newbie D3 polygon</h1>\n        <SimplePolygon/>\n\n        <h1>Here's a newbie D3 barchart</h1>\n        <BarChart/>\n\n        <h1>This is example of calling SageMaker</h1>\n        <CallingSageMaker/>\n         {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />  */}\n         <h1> this is a logo</h1>\n         <Logo/>\n\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}